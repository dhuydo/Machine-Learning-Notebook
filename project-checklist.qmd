# Machine Learning Project Workflow {#sec-ml-project}

::: {.callout-note collapse="true"}
## What are the main phases of a ML Project?

1. Frame problem
2. Get data
3. Gain insights
4. Prepare data
5. Choose models
6. Fine-tune and combine models
7. Present solutions
8. Launch, monitor and maintain system
:::


## Frame problem

1. Objective and current solutions?
2. New solutions: how to use
3. Depend on type of problems: possible models, performance measuring
4. Minimum needed performance
5. Comparable problems -> Can reuse experiment, tools?
6. List and verify assumptions (if available)


## Get data

*Automate as much as possible*\

1. List data: where to get, how much (features, instances), storage space
2. Get and convert data if necessary
3. Anonymize sensitive information
4. Recheck data


## Gain Insights

1. Create a copy of the data for exploration (sampling it down to a manageable size if necessary).
2. Create a notebook to keep a record of your data exploration. 
3. Study each attribute and its characteristics:

- Name
- Type (categorical, int/float, bounded/unbounded, text, structured, etc.) 
- % of missing values
- Noisiness and type of noise (stochastic, outliers, rounding errors, etc.)
- Usefulness for the task
- Type of distribution (Gaussian, uniform, logarithmic, etc.)

4. For supervised learning tasks, identify the target attribute(s). 
5. Visualize the data.
6. Study the correlations/mututal information
7. Identify the promising transformations/feature engineering
8. Identify extra data that would be useful. 
9. Document what you have learned.


## Prepare data

::: {.callout-note}
- Work on copies of the data (keep the original dataset intact).
- Write functions for all data transformations you apply, for five reasons:\
    — Easily prepare the data the next time you get a fresh dataset\
    — Easily to apply transformations for test set/new instances once solution is live\
    — Treat preparation choices as hyperparameters
:::

1. Clean the data

- Fix or remove outliers (optional).
- Fill in missing values (e.g., with zero, mean, median...) or drop their rows (or columns).

2. Perform feature selection (optional)
- Drop the attributes that provide no useful information for the task.
3. Perform feature engineering, where appropriate:
• Discretize continuous features.
• Decompose features (e.g., categorical, date/time, etc.).
• Add promising transformations of features (e.g., log(x), sqrt(x), x2, etc.).
• Aggregate features into promising new features.
4. Perform feature scaling:
• Standardize or normalize features.


## Choose models

Notes:
• If the data is huge, you may want to sample smaller training sets so you can train many different models in a reasonable time (be aware that this penalizes complex models such as large neural nets or random forests).
• Once again, try to automate these steps as much as possible.
1. Train many quick-and-dirty models from different categories (e.g., linear, naive Bayes, SVM, random forest, neural net, etc.) using standard parameters.
2. Measure and compare their performance:
• For each model, use N-fold cross-validation and compute the mean and stan‐
dard deviation of the performance measure on the N folds. 3. Analyze the most significant variables for each algorithm.
4. Analyze the types of errors the models make:
• What data would a human have used to avoid these errors?
5. Perform a quick round of feature selection and engineering.
6. Perform one or two more quick iterations of the five previous steps.
7. Shortlist the top three to five most promising models, preferring models that make different types of errors.


## Fine-tune and combine models

Notes:
• You will want to use as much data as possible for this step, especially as you move toward the end of fine-tuning.
• As always, automate what you can.
1. Fine-tune the hyperparameters using cross-validation:
• Treat your data transformation choices as hyperparameters, especially when you are not sure about them (e.g., if you’re not sure whether to replace missing values with zeros or with the median value, or to just drop the rows).
• Unless there are very few hyperparameter values to explore, prefer random search over grid search. If training is very long, you may prefer a Bayesian optimization approach (e.g., using Gaussian process priors, as described by Jasper Snoek et al.1).
2. Try ensemble methods. Combining your best models will often produce better performance than running them individually.
3. Once you are confident about your final model, measure its performance on the test set to estimate the generalization error.

::: {.callout-important}
Don’t tweak your model after measuring the generalization error: you would just start overfitting the test set.
:::


## Present solutions

1. Document what you have done. 
2. Create a nice presentation: Make sure you highlight the big picture first.
3. Explain why your solution achieves the business objective.
4. Don’t forget to present interesting points you noticed along the way:
• Describe what worked and what did not.
• List your assumptions and your system’s limitations.
5. Ensure your key findings are communicated through beautiful visualizations or easy-to-remember statements (e.g., “the median income is the number-one predictor of housing prices”).


## Launch, monitor and maintain system

1. Get your solution ready for production (plug into production data inputs, write unit tests, etc.).
2. Write monitoring code to check your system’s live performance at regular inter‐ vals and trigger alerts when it drops:
• Beware of slow degradation: models tend to “rot” as data evolves.
• Measuring performance may require a human pipeline (e.g., via a crowdsourc‐ ing service).
• Also monitor your inputs’ quality (e.g., a malfunctioning sensor sending ran‐ dom values, or another team’s output becoming stale). This is particularly important for online learning systems.
3. Retrain your models on a regular basis on fresh data (automate as much as possible).